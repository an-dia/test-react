{"version":3,"sources":["components/CounterControls.jsx","redux/counter/counter-types.js","components/Counter.jsx","redux/counter/counter-actions.js","App.jsx","redux/counter/counter-reducer.js","redux/store.js","index.js"],"names":["CounterControls","step","onIncrement","onDecrement","type","onClick","connect","state","value","counter","dispatch","actionTypes","payload","actions","a","x","y","console","log","App","todos","initialTodos","deleteTodo","todoId","setState","prevState","filter","todo","id","Component","combineReducers","rootReducer","counterReducer","store","createStore","composeWithDevTools","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6mBAYeA,EAZS,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,YAArB,OACtB,gCACE,yBAAQC,KAAK,SAASC,QAASH,EAA/B,iFACgBD,KAGhB,yBAAQG,KAAK,SAASC,QAASF,EAA/B,iFACgBF,SCJL,EAHG,oBAGH,EAFG,oBC4BHK,eAVS,SAAAC,GAAK,MAAK,CAChCC,MAAOD,EAAME,QAAQD,MACrBP,KAAMM,EAAME,QAAQR,SAGK,SAAAS,GAAQ,MAAK,CACtCR,YAAa,SAACM,GAAD,OAAWE,ECvBD,SAAAF,GAAK,MAAK,CACjCJ,KAAMO,EACNC,QAASJ,GDqBwBK,CAAkBL,KACnDL,YAAa,SAACK,GAAD,OAAWE,ECnBD,SAAAF,GAAK,MAAK,CACjCJ,KAAMO,EACNC,QAASJ,GDiBwBK,CAAkBL,QAGtCF,EAxBC,SAAC,GAA6C,IAA5CE,EAA2C,EAA3CA,MAAOP,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YAC1C,OACG,gCACC,cAAC,EAAD,CACEF,KAAMA,EACNC,YAAa,kBAAMA,EAAYD,IAC/BE,YAAa,kBAAMA,EAAYF,MAEjC,+BAAOO,UAkBPM,EAAI,SAACC,GACT,OAAO,SAAAC,GACL,OAAOD,EAAIC,IAGfF,EAAE,EAAFA,CAAK,GACLG,QAAQC,IAAIJ,EAAE,EAAFA,CAAK,I,YEVIK,E,4MACnBZ,MAAQ,CACNa,MAAOC,G,EAGTC,WAAa,SAACC,GACZ,EAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5BL,MAAOK,EAAUL,MAAMM,QAAO,SAACC,GAAD,OAAUA,EAAKC,KAAOL,U,uDAatD,OACE,mCACE,cAAC,EAAD,U,GAtByBM,a,eCTlBC,4BAAgB,CAC7BtB,MAhBmB,WAAoC,IAAnCD,EAAkC,uDAA1B,GAA0B,yCAApBH,EAAoB,EAApBA,KAAMQ,EAAc,EAAdA,QACxC,OAAQR,GACN,KAAKO,EACH,OAAOJ,EAAQK,EAEjB,KAAKD,EACH,OAAOJ,EAAQK,EAEjB,QACE,OAAOL,IAQXN,KAJkB,eAACM,EAAD,uDAAS,EAAT,OAAuBA,KCZrCwB,EAAcD,0BAAgB,CAClCrB,QAASuB,IAKIC,EAFDC,sBAAYH,EAAaI,iCCDvClB,QAAQC,IAAIe,EAAMG,YAElBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,W","file":"static/js/main.bd6197fc.chunk.js","sourcesContent":["const CounterControls = ({step, onIncrement, onDecrement}) => (\n  <div>\n    <button type=\"button\" onClick={onIncrement}>\n      Увеличить на {step}\n    </button>\n\n    <button type=\"button\" onClick={onDecrement}>\n      Уменьшить на {step}\n    </button>\n  </div>\n);\n\nexport default CounterControls;\n","const INCREMENT = 'counter/Increment';\r\nconst DECREMENT = 'counter/Decrement';\r\n\r\nexport default { INCREMENT, DECREMENT };","import CounterControls from \"./CounterControls\";\nimport { connect } from 'react-redux';\nimport * as actions from '../redux/counter/counter-actions';\n\n\nconst Counter = ({value, step, onIncrement, onDecrement}) => {\n  return (\n     <div>\n      <CounterControls\n        step={step}\n        onIncrement={() => onIncrement(step)}\n        onDecrement={() => onDecrement(step)}\n      />\n      <span>{value}</span> \n     \n      </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  value: state.counter.value,\n  step: state.counter.step,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onIncrement: (value) => dispatch(actions.increment(value)),\n  onDecrement: (value) => dispatch(actions.decrement(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n\nconst a = (x) => {\n  return y => {\n    return x + y;\n  }\n};\na(2)(3)\nconsole.log(a(2)(3)); //5\n\n// export default class Counter extends Component {\n//   // static propTypes = {};\n\n// //   static defaultProps = { initialValue: 0, step: 1 };\n\n//   //  constructor(props) {\n//   //   super(props);\n\n//   //    this.state = {\n//   //      value: this.props.initialValue,\n//   //    };\n//   // }\n\n//   // state = {\n//   //   value: this.props.initialValue,\n//   // };\n\n//   // handleIncrement = () => {\n\n//   //   this.setState(({value}) => ({\n//   //     value: value + 1,\n    \n//   //   }));\n//   // };\n\n//   // handleDecrement = () => {\n\n//   //   this.setState(({value}) => ({\n//   //     value: value - 1,\n    \n//   //   }));\n//   // };\n\n//   render() {\n//     // const { value } = this.state;\n//     return (\n//       <div>\n//         <CounterControls\n//           onIncrement={this.handleIncrement}\n//           onDecrement={this.handleDecrement}\n//         />\n//         <span>{value}</span>\n//       </div>\n//     );\n//   }\n// }\n\n//  <button type='button' onClick={(e) => {\n//             // console.log(e.target);\n//           console.log(this);\n//             console.log('Increment');\n//           // const t = e.target;\n//             // setTimeout(() => {\n//             //   console.log(e.target)\n//             // }, 500)\n//             }}\n//             >Increment\n//           </button>\n\n// constructor() {\n//   super();\n\n//   this.handleIncrement = this.handleIncrement.bind(this);\n// }\n//  handleIncrement = e => {\n//   console.log(this);\n//   console.log('Increment');\n// }\n\n//    for (let i = 0; i < 3; i += 1) {\n//       console.log('this.state.value', this.state.value);\n//       this.setState(prevState => {\n//      console.log('prevState.value', prevState.value);\n//       return {\n//         value: prevState.value + 1,\n//       }\n//     })\n//  }\n\n\n","import actionTypes from './counter-types';\r\n\r\nexport const increment = value => ({\r\n  type: actionTypes.INCREMENT,\r\n  payload: value,\r\n});\r\n\r\nexport const decrement = value => ({\r\n  type: actionTypes.DECREMENT,\r\n  payload: value,\r\n});","// import PaintingList from \"./components/PaintingList\";\r\n// import ColorPicker from \"./components/ColorPicker\";\r\n// import Section from \"./components/Section\";\r\n// import Alert from \"./components/Alert/Alert\";\r\n// import Container from \"./components/Container/Container\";\r\n// import Box from \"./components/Box/Box\";\r\n// import paintings from \"./paintings.json\";\r\n\r\nimport React, { Component } from \"react\";\r\n// import Layout from './components/Layout/Layout';\r\nimport Counter from './components/Counter';\r\n// import TaskList from './components/TaskList/TaskList';\r\n// import TaskEditor from './components/TaskEditor/TaskEditor';\r\n// import createTask from './components/utils/create-task';\r\n// import Dropdown from './components/Dropdown';\r\n// import TodoList from \"./components/TodoList\";\r\nimport initialTodos from \"./todos.json\";\r\n\r\n// const colorPickerOptions = [\r\n//   { label: \"red\", color: \"#F44336\" },\r\n//   { label: \"green\", color: \"#4CAF50\" },\r\n//   { label: \"blue\", color: \"#2196F3\" },\r\n//   { label: \"grey\", color: \"#607D8B\" },\r\n//   { label: \"pink\", color: \"#E91E63\" },\r\n//   { label: \"indigo\", color: \"#3F51B5\" },\r\n// ];\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    todos: initialTodos,\r\n  };\r\n\r\n  deleteTodo = (todoId) => {\r\n    this.setState((prevState) => ({\r\n      todos: prevState.todos.filter((todo) => todo.id !== todoId),\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    // const { todos } = this.state;\r\n\r\n    // const totalTodoCount = todos.length;\r\n    // const completedTodoCount = todos.reduce(\r\n    //   (total, todo) => (todo.completed ? total + 1 : total),\r\n    //   0\r\n    // );\r\n\r\n    return (\r\n      <>\r\n        <Counter/>\r\n        {/* <div>\r\n          <p>Общее кол-во: {totalTodoCount}</p>\r\n          <p>Кол-во выполненных: {completedTodoCount}</p>\r\n        </div>\r\n        <TodoList todos={todos} onDeleteTodo={this.deleteTodo} />\r\n        <ColorPicker options={colorPickerOptions} /> */}\r\n        {/* <Dropdown />  */}\r\n      </>\r\n\r\n      // <Container>\r\n      //    <Box type=\"small\" classNames=\"big red\" styles={{ color: \"#fff\" }} />\r\n      //   <Box type=\"medium\" />\r\n      //   <Box type=\"large\" />\r\n      //   <Alert text=\"Шеф все пропало!\" type=\"success\" />\r\n      //   <Alert text=\"Шеф все пропало!\" type=\"warning\" />\r\n      //   <Alert text=\"Шеф все пропало!\" type=\"error\" />\r\n      //   <ColorPicker options={colorPickerOptions} />\r\n      //   <Section title=\"Топ недели\">\r\n      //     <PaintingList items={paintings} />\r\n      //   </Section>\r\n      //   <Section title=\"Лучшее\" />\r\n      // </Container>\r\n    );\r\n  }\r\n}\r\n\r\n// export default class App extends Component {\r\n//   state = {\r\n//     tasks: [],\r\n//   }\r\n\r\n//   addTask = () => {\r\n//     const task = createTask();\r\n//     console.log(task);\r\n\r\n//     this.setState(prevState => {\r\n//       return {\r\n//         tasks: [...prevState.tasks, task]\r\n//       }\r\n//     })\r\n//   }\r\n\r\n//   removeTask = taskId => {\r\n//     this.setState(prevState => {\r\n//       return {\r\n//        tasks: prevState.tasks.filter(({id}) => id !== taskId)\r\n//      }\r\n//    })\r\n//   }\r\n\r\n//   render() {\r\n//     const { tasks } = this.state;\r\n\r\n//     return (\r\n//       <Layout>\r\n//        <TaskEditor onAddTask={this.addTask} />\r\n//         {tasks.length > 0 && <TaskList tasks={tasks} onRemoveTask={this.removeTask}/>}\r\n//       </Layout>\r\n//     );\r\n//   }\r\n// }\r\n","import { combineReducers } from 'redux';\r\nimport actionTypes from './counter-types';\r\n\r\nconst valueReducer = (state = 10, { type, payload }) => {\r\n  switch (type) {\r\n    case actionTypes.INCREMENT:\r\n      return state + payload;\r\n    \r\n    case actionTypes.DECREMENT:\r\n      return state - payload;\r\n    \r\n    default:\r\n      return state;\r\n  };\r\n}\r\n\r\nconst stepReducer = (state = 5, action) => state;\r\n\r\nexport default combineReducers({\r\n  value: valueReducer,\r\n  step: stepReducer,\r\n});","import { createStore, combineReducers  } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport counterReducer from './counter/counter-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  counter: counterReducer,\r\n});\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './redux/store';\r\n\r\nconsole.log(store.getState());\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}